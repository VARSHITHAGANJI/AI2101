# -*- coding: utf-8 -*-
"""ASS_2Q6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SL5b6sKKtepfClYhlhYMK3-LXO4snHdK
"""

import numpy as np 
import cvxpy as cp

x = cp.Variable((2,1))
P = np.array([[2,-1],[-1,4]])
q = np.array([[-1,0]]).T
A = np.array([[1,-2],[1,4],[5,-76]])
b = np.array([[-2],[-3],[1]])
obj = 1/2*cp.quad_form(x,P) + q.T@x
fn = cp.Minimize(obj)
c = [A@x <= b]
pr = cp.Problem(cp.Minimize(obj),c)
pr.solve()

x.value
# c[0].dual_value
# print(2*P*x.value + q + A.T@c[0].dual_value)

b.shape
d = np.ones((3,1))
print(d.T@b)

s = np.linalg.inv(P)
s

s = np.linalg.inv(P)

lam = cp.Variable((3,1))
z = s@(A.T@lam+q)

dual  = -((lam.T)@b) - ((lam.T)@(A@z)) - (q.T@s) + 1/2*(z.T@P@z)
# z = (A.T@lam + q.T).T@A
# z.shape
f = cp.Maximize(dual[0,0])
c = [lam >= 0]
p = cp.Problem(f,c)
p.solve()

lam.value[0]

